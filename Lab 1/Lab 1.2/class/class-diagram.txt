@startuml
class User {
  - id: int
  - email: string
  - password: string
  - firstName: string
  - lastName: string
  - dateOfBirth: Date
  - gender: bool
  - phoneNumber: string
  - image: string
  - isConsultant: bool
  - remindUser: bool
  + SignIn (email: string, password: string): bool
  + SignUp (user: User): void
  + ForgetPassword (email: string): string
  + ChangePassword (newPassword: string): void
  + UpdateProfile (user: User): void
  + ToggleReminderSwitch(): void
}

class Child {
  - id: int
  - name: string
  - dateOfBirth: Date
  - gender: bool
  - image: string
  + CreateChild (child: Child): void
  + ReadChild (id: int): Child
  + UpdateChild (child: Child): void
  + DeleteChild (id: int): void
  + ListChild (): Child[]
  + SearchChild (name: string): Child[]
}

User "1" -- "many" Child: Has 

class HealthcareInfo {
  - id: int
  - title: string
  - category: int
  - content: string
  - image: string
  - video: string
  - dateCreate: Date
  - dateUpdate: Date
  + SearchInfoByKeyword (title: string): HealthcareInfo[]
  + SearchInfoByCategory (category: int): HealthcareInfo[]
  + ReadInfo (id: int): HealthcareInfo
}

class HealthCategory {
  - id: int
  - name: string
  + ListCategory (): HealthCategory[]
}

HealthCategory "1" -- "many" HealthcareInfo: Belongs

class HealthMetric {
  - childId: int
  - weight: double
  - height: double
  - headCir: double
  - chestCir: double
  - waistCir: double
  - bloodPressure: double
  - heartRate: double
  - bloodSugar: double
  - temperature: double
  + UpdateMetric (metric: HealthMetric): void
  + SearchChildForMetric (name: string): HealthMetric
}

Child "1" -- "1" HealthMetric: Has

class MedicalHistory {
  - id: int
  - childId: int
  - examDate: Date
  - facility: string
  - doctor: string
  - diagnosis: string
  - treatment: string
  + CreateHistory (history: MedicalHistory): void
  + ReadHistory (id: int): MedicalHistory
  + UpdateHistory (history: MedicalHistory): void
  + DeleteHistory (id: int): void
  + ListHistory (): MedicalHistory[]
  + SearchHistory (diagnosis: string): MedicalHistory[]
  + SearchChildForHistory (nameChild: string): MedicalHistory[]
}

Child "1" -- "many" MedicalHistory: Has

class TestResult {
  - id: int
  - childId: int
  - testDate: Date
  - testCategory: string
  - result: string
  + CreateResult (result: TestResult): void
  + ReadResult (id: int): TestResult
  + UpdateResult (result: TestResult): void
  + DeleteResult (id: int): void
  + ListResult (): TestResult[]
  + SearchResult (testCategory: string): TestResult[]
  + SearchChildForResult (nameChild: string): TestResult[]
}

Child "1" -- "many" TestResult: Has

class HealthIssue {
  - id: int
  - childId: int
  - nameIssue: string
  - severityLevel: string
  - periodIssue: string
  - treatment: string
  + CreateIssue (issue: HealthIssue): void
  + ReadIssue (id: int): HealthIssue
  + UpdateIssue (issue: HealthIssue): void
  + DeleteIssue (id: int): void
  + ListIssue (): HealthIssue[]
  + SearchIssue (nameIssue: string): HealthIssue[]
  + SearchChildForIssue (nameChild: string): HealthIssue[]
}

Child "1" -- "many" HealthIssue: Has

class Consultant {
  - specialization: string
  - periodExperience: string
  + AgreeConsultation (consultationId: int): void
  + DenyConsultation (consultationId: int): void
}

User <|-- Consultant

class Consultation {
  - id: int
  - userId: int
  - consultantId: int
  - nameChild: string
  - ageChild: int
  - genderChild: bool
  - issue: string
  - note: string
  - sentAt: DateTime
  - isAccepted: string
  + CreateConsultation (consult: Consultation): void
  + ListConsultation (): Consultation[]
  + ViewConsultation (id: int): Consultation
  + SearchConsultation (nameChild: string): Consultation[]
}

User "1" -- "many" Consultation: Has
Consultant "1" -- "many" Consultation: Accepts

class Message {
 - id: int
 - consultationId: int
 - content: string
 - isConsultant: bool
 - timeAt: DateTime
}

Consultation "1" -- "many" Message: Contains

class CheckUp {
  - id: int
  - childId: int
  - examCategory: string
  - examDate: Date
  - location: string
  + CreateCheckUp (check: CheckUp): void
  + ReadCheckUp (id: int): CheckUp
  + UpdateCheckUp (check: CheckUp): void
  + DeleteCheckUp (id: int): void
  + ListCheckUp (): CheckUp[]
  + SearchCheckUp (examCategory: string): CheckUp[]
  + SearchChildForCheckUp (nameChild: string): CheckUp[]
}

Child "1" -- "many" CheckUp: Has

class Vaccination {
  - id: int
  - childId: int
  - vaccCategory: string
  - vaccDate: Date
  - location: string
  + CreateVaccination (vacc: Vaccination): void
  + ReadVaccination (id: int): Vaccination
  + UpdateVaccination (vacc: Vaccination): void
  + DeleteVaccination (id: int): void
  + ListVaccination (): Vaccination[]
  + SearchVaccination (vaccCategory: string): Vaccination[]
  + SearchChildForVaccination (nameChild: string): Vaccination[]
}

Child "1" -- "many" Vaccination: Has

@enduml